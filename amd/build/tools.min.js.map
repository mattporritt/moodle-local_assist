{"version":3,"file":"tools.min.js","sources":["../src/tools.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to load and render the tools for the AI assist plugin.\n *\n * @module     local_assist/tools\n * @copyright  2023 Matt Porritt <matt.porritt@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Popover from 'local_assist/popover';\nimport $ from 'jquery'; // Jquery is required for Bootstrap 4 poppers.\nimport * as AssistModal from 'local_assist/modal';\nimport Ajax from 'core/ajax';\nimport * as coreStr from 'core/str';\n\n/**\n *  The context id for the current page.\n * @type {integer}\n */\nlet contextId;\n\n/**\n * The parent id for the popover, used to identify the popover.\n * @type {string}\n */\nconst parentId = 'text-selection-popover';\n\n/**\n * The saved text selection range.\n * @type {range}\n */\nlet textRange = null;\n\n/**\n * The action ids for the popover links.\n * @type {object}\n */\nconst actionIds = {\n    \"local-assist-popover-explain\": 'explain',\n    \"local-assist-popover-summarise\": 'summarise',\n    \"local-assist-popover-translate\": 'translate',\n    \"local-assist-popover-question\": 'questionanswer',\n};\n\n/**\n * Process the request to the AI service.\n * Will pass the selected text to the AI service and return the response.\n *\n * @param {string} linkId The ID of the clicked action link.\n * @returns {Promise<void>}\n */\nconst processRequest = async(linkId) => {\n    // Pass the prompt text to the webservice using Ajax.\n    window.console.log(textRange.toString());\n    const request = {\n        methodname: 'local_assist_ai_generate',\n        args: {\n            contextid: contextId,\n            selectedtext: textRange.toString(),\n            action: actionIds[linkId],\n        }\n    };\n\n    // Try making the ajax call and catch any errors.\n    try {\n        const responseObj = await Ajax.call([request])[0];\n        window.console.log(responseObj);\n\n        // Replace line breaks with <br> and with </p><p> for paragraphs.\n        const modalContent = replaceLineBreaks(responseObj.generatedcontent);\n        // Update the modal content.\n        AssistModal.updateModalContent(modalContent);\n\n        // Hide the loading spinner.\n        AssistModal.hideLoading();\n\n    } catch (error) {\n        window.console.log(error);\n        // TODO: Display error message in modal.\n    }\n};\n\n/**\n * Display the modal when AI assistance is selected.\n *\n * @param {string} linkId The ID of the clicked action link.\n */\nconst displayModal = async(linkId) => {\n    // Create and display the modal.\n    const title = await coreStr.getString(`title_${actionIds[linkId]}`, 'local_assist');\n    await AssistModal.displayModal(() => {\n        // Restore the saved text selection.\n        restoreSelection();\n\n        // Show the popover again.\n        Popover.showPopover(parentId);\n        Popover.addPopoverListeners(handlePopoverClick);\n    }, title, true);\n\n    // Call the AI service.\n    await processRequest(linkId);\n};\n\nconst setRange = (value) => {\n    textRange = value;\n};\n\n/**\n * Restore the saved text selection.\n * Will restore the saved highlighted text range.\n */\nconst restoreSelection = () => {\n    const selection = window.getSelection();\n    selection.removeAllRanges();\n    selection.addRange(textRange);\n};\n\n\n/**\n * Handle the popover link click.\n * Receives the click event and the link id from the popover.\n *\n * @param {Event} event The click event.\n * @param {string} linkId The link id.\n */\nconst handlePopoverClick = (event, linkId) => {\n    event.preventDefault();\n    event.stopImmediatePropagation(); // Prevents the event from propagating up to the document level.\n\n    window.console.log('Link clicked:', linkId);\n    // Hide the popover.\n    Popover.hidePopover(parentId);\n\n    // Display the modal.\n    displayModal(linkId);\n};\n\n/**\n * Handle text selection actions.\n * Triggered by document mouseup event.\n *\n * @param {Event} event The mouseup event.\n */\nconst handleSelection = async(event) => {\n    // First check if we have selected text.\n    const selection = window.getSelection();\n    const selectedText = selection.toString().trim();\n\n    // Only update selected text if there is text actually selected, AND;\n    // Either the Popover or the modal are not shown.\n    if (selectedText.length > 0 && (!Popover.isPopoverVisible(parentId) || !AssistModal.modalExists())) {\n        // Update the saved text range, so we always have the most recent version of selected text.\n        setRange(selection.getRangeAt(0).cloneRange());\n    }\n\n    // Check conditions and show the popover.\n    if (selectedText.length > 0 && !Popover.eventIsPopoverLink(event) && !AssistModal.isModalEvent(event)) {\n        // Create and show popover.\n        const popoverObj = await Popover.createPopover(event, parentId);\n        $(popoverObj).popover('show');\n        // Add event listeners to the popover links.\n        Popover.addPopoverListeners(handlePopoverClick);\n    }\n};\n\n/**\n * Replace double line breaks with <br> and with </p><p> for paragraphs.\n *\n * @param {String} text The text to replace.\n * @returns {String}\n */\nconst replaceLineBreaks = (text) => {\n    // Replace double line breaks with </p><p> for paragraphs\n    const textWithParagraphs = text.replace(/\\n{2,}|\\r\\n/g, '<br/><br/>');\n\n    // Replace remaining single line breaks with <br> tags\n    const textWithBreaks = textWithParagraphs.replace(/\\n/g, '<br/>');\n\n    // Add opening and closing <p> tags to wrap the entire content\n    return `<p>${textWithBreaks}</p>`;\n};\n\n/**\n * Add listener to Shadow DOM.\n *\n * @param {HTMLElement} root The root element of the Shadow DOM.\n */\nconst addListenerToShadowDOM = (root) => {\n    root.addEventListener('mouseup', handleSelection);\n};\n\n/**\n * Add listener to iFrame.\n *\n * @param {HTMLIFrameElement} iframe The iFrame element.\n */\nconst addListenerToIframe = (iframe) => {\n    const iframeDocument = iframe.contentDocument || iframe.contentWindow.document;\n    iframeDocument.addEventListener('mouseup', handleSelection);\n};\n\nexport const init = (context) => {\n    contextId = context;\n    window.console.log('Init tools for context:', contextId);\n\n    // Add listener to  Shadow DOM.\n    const shadowElements = document.querySelectorAll('*');\n    shadowElements.forEach(el => {\n        if (el.shadowRoot) {\n            addListenerToShadowDOM(el.shadowRoot);\n        }\n    });\n\n    // Add listener to  iFrames.\n    const iframes = document.querySelectorAll('iframe');\n    iframes.forEach(addListenerToIframe);\n\n    // Add listener to  main document.\n    document.addEventListener('mouseup', handleSelection);\n\n    // Track the start of text selection.\n    document.addEventListener('mousedown', (event) => {\n        if (Popover.popoverContains(event.target)) {\n        } else {\n            Popover.setStartX(event.pageX);\n        }\n    });\n\n    // Global click listener to manage popover removing and stored selection clearing.\n    document.addEventListener('click', (event) => {\n        // Clear the stored text and kill the modal if the modal is not visible and the click target is not the popover.\n        const selection = window.getSelection();\n        const selectedText = selection.toString().trim();\n        if (!AssistModal.modalExists() && !Popover.popoverContains(event.target) && selectedText.length === 0) {\n            setRange(null);\n            Popover.removePopover(parentId); // Shouldn't happen, but just in case.\n        }\n    });\n};\n"],"names":["contextId","parentId","textRange","actionIds","displayModal","async","title","coreStr","getString","linkId","AssistModal","restoreSelection","Popover","showPopover","addPopoverListeners","handlePopoverClick","window","console","log","toString","request","methodname","args","contextid","selectedtext","action","responseObj","Ajax","call","modalContent","replaceLineBreaks","generatedcontent","updateModalContent","hideLoading","error","processRequest","setRange","value","selection","getSelection","removeAllRanges","addRange","event","preventDefault","stopImmediatePropagation","hidePopover","handleSelection","selectedText","trim","length","isPopoverVisible","modalExists","getRangeAt","cloneRange","eventIsPopoverLink","isModalEvent","popoverObj","createPopover","popover","text","textWithBreaks","replace","addListenerToIframe","iframe","contentDocument","contentWindow","document","addEventListener","context","querySelectorAll","forEach","el","shadowRoot","popoverContains","target","setStartX","pageX","removePopover"],"mappings":";;;;;;;SAiCIA,4SAMEC,SAAW,6BAMbC,UAAY,WAMVC,UAAY,gCACkB,2CACE,6CACA,4CACD,kBA8C/BC,aAAeC,MAAAA,eAEXC,YAAcC,QAAQC,0BAAmBL,UAAUM,SAAW,sBAC9DC,YAAYN,cAAa,KAE3BO,mBAGAC,QAAQC,YAAYZ,UACpBW,QAAQE,oBAAoBC,sBAC7BT,OAAO,QA9CSD,OAAAA,SAEnBW,OAAOC,QAAQC,IAAIhB,UAAUiB,kBACvBC,QAAU,CACZC,WAAY,2BACZC,KAAM,CACFC,UAAWvB,UACXwB,aAActB,UAAUiB,WACxBM,OAAQtB,UAAUM,oBAMhBiB,kBAAoBC,cAAKC,KAAK,CAACR,UAAU,GAC/CJ,OAAOC,QAAQC,IAAIQ,mBAGbG,aAAeC,kBAAkBJ,YAAYK,kBAEnDrB,YAAYsB,mBAAmBH,cAG/BnB,YAAYuB,cAEd,MAAOC,OACLlB,OAAOC,QAAQC,IAAIgB,SAuBjBC,CAAe1B,SAGnB2B,SAAYC,QACdnC,UAAYmC,OAOV1B,iBAAmB,WACf2B,UAAYtB,OAAOuB,eACzBD,UAAUE,kBACVF,UAAUG,SAASvC,YAWjBa,mBAAqB,CAAC2B,MAAOjC,UAC/BiC,MAAMC,iBACND,MAAME,2BAEN5B,OAAOC,QAAQC,IAAI,gBAAiBT,QAEpCG,QAAQiC,YAAY5C,UAGpBG,aAAaK,SASXqC,gBAAkBzC,MAAAA,cAEdiC,UAAYtB,OAAOuB,eACnBQ,aAAeT,UAAUnB,WAAW6B,YAItCD,aAAaE,OAAS,IAAOrC,QAAQsC,iBAAiBjD,WAAcS,YAAYyC,eAEhFf,SAASE,UAAUc,WAAW,GAAGC,cAIjCN,aAAaE,OAAS,IAAMrC,QAAQ0C,mBAAmBZ,SAAWhC,YAAY6C,aAAab,OAAQ,OAE7Fc,iBAAmB5C,QAAQ6C,cAAcf,MAAOzC,8BACpDuD,YAAYE,QAAQ,QAEtB9C,QAAQE,oBAAoBC,sBAU9Be,kBAAqB6B,aAKjBC,eAHqBD,KAAKE,QAAQ,eAAgB,cAGdA,QAAQ,MAAO,4BAG5CD,wBAiBXE,oBAAuBC,UACFA,OAAOC,iBAAmBD,OAAOE,cAAcC,UACvDC,iBAAiB,UAAWrB,gCAG1BsB,UACjBpE,UAAYoE,QACZpD,OAAOC,QAAQC,IAAI,0BAA2BlB,WAGvBkE,SAASG,iBAAiB,KAClCC,SAAQC,KACfA,GAAGC,YACoBD,GAAGC,WArB7BL,iBAAiB,UAAWrB,oBA0BjBoB,SAASG,iBAAiB,UAClCC,QAAQR,qBAGhBI,SAASC,iBAAiB,UAAWrB,iBAGrCoB,SAASC,iBAAiB,aAAczB,QAChC9B,QAAQ6D,gBAAgB/B,MAAMgC,SAE9B9D,QAAQ+D,UAAUjC,MAAMkC,UAKhCV,SAASC,iBAAiB,SAAUzB,cAG1BK,aADY/B,OAAOuB,eACMpB,WAAW6B,OACrCtC,YAAYyC,eAAkBvC,QAAQ6D,gBAAgB/B,MAAMgC,SAAmC,IAAxB3B,aAAaE,SACrFb,SAAS,MACTxB,QAAQiE,cAAc5E"}