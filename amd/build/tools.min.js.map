{"version":3,"file":"tools.min.js","sources":["../src/tools.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to load and render the tools for the AI assist plugin.\n *\n * @module     local_assist/tools\n * @copyright  2023 Matt Porritt <matt.porritt@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Popover from 'local_assist/popover';\nimport $ from 'jquery'; // Jquery is required for Bootstrap 4 poppers.\nimport * as AssistModal from 'local_assist/modal';\n\n/**\n *  The context id for the current page.\n * @type {integer}\n */\nlet contextId;\n\n/**\n * The parent id for the popover, used to identify the popover.\n * @type {string}\n */\nconst parentId = 'text-selection-popover';\n\n/**\n * The saved text selection range.\n * @type {range}\n */\nlet textRange = null;\n\n/**\n * Display the modal when AI assistance is selected.\n *\n */\nconst displayModal = async() => {\n    // Create and display the modal.\n    await AssistModal.displayModal(() => {\n        // Restore the saved text selection.\n        restoreSelection();\n\n        // Show the popover again.\n        Popover.showPopover(parentId);\n        Popover.addPopoverListeners(handlePopoverClick);\n    }, true);\n};\n\nconst setRange = (value) => {\n    textRange = value;\n};\n\n/**\n * Restore the saved text selection.\n * Will restore the saved highlighted text range.\n */\nconst restoreSelection = () => {\n    const selection = window.getSelection();\n    selection.removeAllRanges();\n    selection.addRange(textRange);\n};\n\n\n/**\n * Handle the popover link click.\n * Receives the click event and the link id from the popover.\n *\n * @param {Event} event The click event.\n * @param {string} linkId The link id.\n */\nconst handlePopoverClick = (event, linkId) => {\n    event.preventDefault();\n    event.stopImmediatePropagation(); // Prevents the event from propagating up to the document level.\n\n    window.console.log('Link clicked:', linkId);\n    // Hide the popover.\n    Popover.hidePopover(parentId);\n\n    // Display the modal.\n    displayModal();\n};\n\n/**\n * Handle text selection actions.\n * Triggered by document mouseup event.\n *\n * @param {Event} event The mouseup event.\n */\nconst handleSelection = async(event) => {\n    // First check if we have selected text.\n    const selection = window.getSelection();\n    const selectedText = selection.toString().trim();\n\n    // Only update selected text if there is text actually selected, AND;\n    // Either the Popover or the modal are not shown.\n    if (selectedText.length > 0 && (!Popover.isPopoverVisible(parentId) || !AssistModal.modalExists())) {\n        // Update the saved text range, so we always have the most recent version of selected text.\n        setRange(selection.getRangeAt(0).cloneRange());\n    }\n\n    // Check conditions and show the popover.\n    if (selectedText.length > 0 && !Popover.eventIsPopoverLink(event) && !AssistModal.isModalEvent(event)) {\n        // Create and show popover.\n        const popoverObj = await Popover.createPopover(event, parentId);\n        $(popoverObj).popover('show');\n        // Add event listeners to the popover links.\n        Popover.addPopoverListeners(handlePopoverClick);\n    }\n};\n\n/**\n * Add listener to Shadow DOM.\n *\n * @param {HTMLElement} root The root element of the Shadow DOM.\n */\nconst addListenerToShadowDOM = (root) => {\n    root.addEventListener('mouseup', handleSelection);\n};\n\n/**\n * Add listener to iFrame.\n *\n * @param {HTMLIFrameElement} iframe The iFrame element.\n */\nconst addListenerToIframe = (iframe) => {\n    const iframeDocument = iframe.contentDocument || iframe.contentWindow.document;\n    iframeDocument.addEventListener('mouseup', handleSelection);\n};\n\nexport const init = (context) => {\n    contextId = context;\n    window.console.log('Init tools for context:', contextId);\n\n    // Add listener to  Shadow DOM.\n    const shadowElements = document.querySelectorAll('*');\n    shadowElements.forEach(el => {\n        if (el.shadowRoot) {\n            addListenerToShadowDOM(el.shadowRoot);\n        }\n    });\n\n    // Add listener to  iFrames.\n    const iframes = document.querySelectorAll('iframe');\n    iframes.forEach(addListenerToIframe);\n\n    // Add listener to  main document.\n    document.addEventListener('mouseup', handleSelection);\n\n    // Track the start of text selection.\n    document.addEventListener('mousedown', (event) => {\n        if (Popover.popoverContains(event.target)) {\n        } else {\n            Popover.setStartX(event.pageX);\n        }\n    });\n\n    // Global click listener to manage popover removing and stored selection clearing.\n    document.addEventListener('click', (event) => {\n        // Clear the stored text and kill the modal if the modal is not visible and the click target is not the popover.\n        const selection = window.getSelection();\n        const selectedText = selection.toString().trim();\n        if (!AssistModal.modalExists() && !Popover.popoverContains(event.target) && selectedText.length === 0) {\n            setRange(null);\n            Popover.removePopover(parentId); // Shouldn't happen, but just in case.\n        }\n    });\n};\n"],"names":["contextId","parentId","textRange","setRange","value","restoreSelection","selection","window","getSelection","removeAllRanges","addRange","handlePopoverClick","event","linkId","preventDefault","stopImmediatePropagation","console","log","Popover","hidePopover","async","AssistModal","displayModal","showPopover","addPopoverListeners","handleSelection","selectedText","toString","trim","length","isPopoverVisible","modalExists","getRangeAt","cloneRange","eventIsPopoverLink","isModalEvent","popoverObj","createPopover","popover","addListenerToIframe","iframe","contentDocument","contentWindow","document","addEventListener","context","querySelectorAll","forEach","el","shadowRoot","popoverContains","target","setStartX","pageX","removePopover"],"mappings":";;;;;;;SA+BIA,+OAMEC,SAAW,6BAMbC,UAAY,WAkBVC,SAAYC,QACdF,UAAYE,OAOVC,iBAAmB,WACfC,UAAYC,OAAOC,eACzBF,UAAUG,kBACVH,UAAUI,SAASR,YAWjBS,mBAAqB,CAACC,MAAOC,UAC/BD,MAAME,iBACNF,MAAMG,2BAENR,OAAOS,QAAQC,IAAI,gBAAiBJ,QAEpCK,QAAQC,YAAYlB,UAxCHmB,iBAEXC,YAAYC,cAAa,KAE3BjB,mBAGAa,QAAQK,YAAYtB,UACpBiB,QAAQM,oBAAoBb,uBAC7B,IAkCHW,IASEG,gBAAkBL,MAAAA,cAEdd,UAAYC,OAAOC,eACnBkB,aAAepB,UAAUqB,WAAWC,YAItCF,aAAaG,OAAS,IAAOX,QAAQY,iBAAiB7B,WAAcoB,YAAYU,eAEhF5B,SAASG,UAAU0B,WAAW,GAAGC,cAIjCP,aAAaG,OAAS,IAAMX,QAAQgB,mBAAmBtB,SAAWS,YAAYc,aAAavB,OAAQ,OAE7FwB,iBAAmBlB,QAAQmB,cAAczB,MAAOX,8BACpDmC,YAAYE,QAAQ,QAEtBpB,QAAQM,oBAAoBb,sBAkB9B4B,oBAAuBC,UACFA,OAAOC,iBAAmBD,OAAOE,cAAcC,UACvDC,iBAAiB,UAAWnB,gCAG1BoB,UACjB7C,UAAY6C,QACZtC,OAAOS,QAAQC,IAAI,0BAA2BjB,WAGvB2C,SAASG,iBAAiB,KAClCC,SAAQC,KACfA,GAAGC,YACoBD,GAAGC,WArB7BL,iBAAiB,UAAWnB,oBA0BjBkB,SAASG,iBAAiB,UAClCC,QAAQR,qBAGhBI,SAASC,iBAAiB,UAAWnB,iBAGrCkB,SAASC,iBAAiB,aAAchC,QAChCM,QAAQgC,gBAAgBtC,MAAMuC,SAE9BjC,QAAQkC,UAAUxC,MAAMyC,UAKhCV,SAASC,iBAAiB,SAAUhC,cAG1Bc,aADYnB,OAAOC,eACMmB,WAAWC,OACrCP,YAAYU,eAAkBb,QAAQgC,gBAAgBtC,MAAMuC,SAAmC,IAAxBzB,aAAaG,SACrF1B,SAAS,MACTe,QAAQoC,cAAcrD"}