{"version":3,"file":"tools.min.js","sources":["../src/tools.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to load and render the tools for the AI assist plugin.\n *\n * @module     local_assist/tools\n * @copyright  2023 Matt Porritt <matt.porritt@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Popover from 'local_assist/popover';\nimport $ from 'jquery'; // Jquery is required for Bootstrap 4 poppers.\nimport AssistModal from 'local_assist/modal';\nimport ModalEvents from 'core/modal_events';\n\n/**\n * The parent id for the popover, used to identify the popover.\n * @type {string}\n */\nconst parentId = 'text-selection-popover';\n\n/**\n * The saved text selection range.\n * @type {range}\n */\nlet textRange = null;\n\n/**\n * Display the modal when AI assistance is selected.\n *\n */\nexport const displayModal = async() => {\n    const modalObject = await AssistModal.create({\n        large: true,\n    });\n    const modalroot = await modalObject.getRoot();\n    const root = modalroot[0];\n    await modalObject.show();\n\n    modalroot.on(ModalEvents.hidden, () => {\n        // Restore the saved text selection.\n        restoreSelection();\n\n        // Show the popover again.\n        Popover.showPopover(parentId);\n        Popover.addPopoverListeners(handlePopoverClick);\n\n        // Destroy the modal.\n        modalObject.destroy();\n    });\n\n    // Add the event listener for the button click events.\n    root.addEventListener('click', (e) => {\n        const submitBtn = e.target.closest('[data-action=\"generate\"]');\n        const insertBtn = e.target.closest('[data-action=\"inserter\"]');\n        if (submitBtn) {\n            e.preventDefault();\n        } else if (insertBtn) {\n            e.preventDefault();\n            modalObject.destroy();\n        }\n    });\n};\n\nconst modalExists = () => {\n    const modal = document.getElementById('local_assist-modal');\n    return modal !== null;\n};\n\nconst isModalEvent = (event) => {\n    let element = event.target;\n    // Traverse up the DOM tree and check each parent element.\n    while (element) {\n        if (element.classList.contains('modal')) {\n            return true;\n        }\n        element = element.parentElement;\n    }\n    return false;\n};\n\n\nconst setRange = (value) => {\n    textRange = value;\n};\n\n/**\n * Restore the saved text selection.\n * Will restore the saved highlighted text range.\n */\nconst restoreSelection = () => {\n    const selection = window.getSelection();\n    selection.removeAllRanges();\n    selection.addRange(textRange);\n};\n\n\n/**\n * Handle the popover link click.\n * Receives the click event and the link id from the popover.\n *\n * @param {Event} event The click event.\n * @param {string} linkId The link id.\n */\nconst handlePopoverClick = (event, linkId) => {\n    event.preventDefault();\n    event.stopImmediatePropagation(); // Prevents the event from propagating up to the document level.\n\n    window.console.log('Link clicked:', linkId);\n    // Hide the popover.\n    Popover.hidePopover(parentId);\n\n    // Display the modal.\n    displayModal();\n};\n\n/**\n * Handle text selection actions.\n * Triggered by document mouseup event.\n *\n * @param {Event} event The mouseup event.\n */\nconst handleSelection = async(event) => {\n    // First check if we have selected text.\n    const selection = window.getSelection();\n    const selectedText = selection.toString().trim();\n\n    // Only update selected text if there is text actually selected, AND;\n    // Either the Popover or the modal are not shown.\n    if (selectedText.length > 0 && (!Popover.isPopoverVisible(parentId) || !modalExists())) {\n        // Update the saved text range, so we always have the most recent version of selected text.\n        setRange(selection.getRangeAt(0).cloneRange());\n    }\n\n    // Check conditions and show the popover.\n    if (selectedText.length > 0 && !Popover.eventIsPopoverLink(event) && !isModalEvent(event)) {\n        // Create and show popover.\n        const popoverObj = await Popover.createPopover(event, parentId);\n        $(popoverObj).popover('show');\n        // Add event listeners to the popover links.\n        Popover.addPopoverListeners(handlePopoverClick);\n    }\n};\n\n/**\n * Add listener to Shadow DOM.\n *\n * @param {HTMLElement} root The root element of the Shadow DOM.\n */\nconst addListenerToShadowDOM = (root) => {\n    root.addEventListener('mouseup', handleSelection);\n};\n\n/**\n * Add listener to iFrame.\n *\n * @param {HTMLIFrameElement} iframe The iFrame element.\n */\nconst addListenerToIframe = (iframe) => {\n    const iframeDocument = iframe.contentDocument || iframe.contentWindow.document;\n    iframeDocument.addEventListener('mouseup', handleSelection);\n};\n\nexport const init = () => {\n    // Add listener to  Shadow DOM.\n    const shadowElements = document.querySelectorAll('*');\n    shadowElements.forEach(el => {\n        if (el.shadowRoot) {\n            addListenerToShadowDOM(el.shadowRoot);\n        }\n    });\n\n    // Add listener to  iFrames.\n    const iframes = document.querySelectorAll('iframe');\n    iframes.forEach(addListenerToIframe);\n\n    // Add listener to  main document.\n    document.addEventListener('mouseup', handleSelection);\n\n    // Track the start of text selection.\n    document.addEventListener('mousedown', (event) => {\n        if (Popover.popoverContains(event.target)) {\n        } else {\n            Popover.setStartX(event.pageX);\n        }\n    });\n\n    // Global click listener to manage popover removing and stored selection clearing.\n    document.addEventListener('click', (event) => {\n        // Clear the stored text and kill the modal if the modal is not visible and the click target is not the popover.\n        const selection = window.getSelection();\n        const selectedText = selection.toString().trim();\n        if (!modalExists() && !Popover.popoverContains(event.target) && selectedText.length === 0) {\n            setRange(null);\n            Popover.removePopover(parentId); // Shouldn't happen, but just in case.\n        }\n    });\n};\n"],"names":["parentId","textRange","displayModal","async","modalObject","AssistModal","create","large","modalroot","getRoot","root","show","on","ModalEvents","hidden","restoreSelection","Popover","showPopover","addPopoverListeners","handlePopoverClick","destroy","addEventListener","e","submitBtn","target","closest","insertBtn","preventDefault","modalExists","document","getElementById","setRange","value","selection","window","getSelection","removeAllRanges","addRange","event","linkId","stopImmediatePropagation","console","log","hidePopover","handleSelection","selectedText","toString","trim","length","isPopoverVisible","getRangeAt","cloneRange","eventIsPopoverLink","element","classList","contains","parentElement","isModalEvent","popoverObj","createPopover","popover","addListenerToIframe","iframe","contentDocument","contentWindow","querySelectorAll","forEach","el","shadowRoot","popoverContains","setStartX","pageX","removePopover"],"mappings":";;;;;;;uJAgCMA,SAAW,6BAMbC,UAAY,WAMHC,aAAeC,gBAClBC,kBAAoBC,eAAYC,OAAO,CACzCC,OAAO,IAELC,gBAAkBJ,YAAYK,UAC9BC,KAAOF,UAAU,SACjBJ,YAAYO,OAElBH,UAAUI,GAAGC,sBAAYC,QAAQ,KAE7BC,mBAGAC,QAAQC,YAAYjB,UACpBgB,QAAQE,oBAAoBC,oBAG5Bf,YAAYgB,aAIhBV,KAAKW,iBAAiB,SAAUC,UACtBC,UAAYD,EAAEE,OAAOC,QAAQ,4BAC7BC,UAAYJ,EAAEE,OAAOC,QAAQ,4BAC/BF,UACAD,EAAEK,iBACKD,YACPJ,EAAEK,iBACFvB,YAAYgB,wDAKlBQ,YAAc,IAEC,OADHC,SAASC,eAAe,sBAiBpCC,SAAYC,QACd/B,UAAY+B,OAOVjB,iBAAmB,WACfkB,UAAYC,OAAOC,eACzBF,UAAUG,kBACVH,UAAUI,SAASpC,YAWjBkB,mBAAqB,CAACmB,MAAOC,UAC/BD,MAAMX,iBACNW,MAAME,2BAENN,OAAOO,QAAQC,IAAI,gBAAiBH,QAEpCvB,QAAQ2B,YAAY3C,UAGpBE,gBASE0C,gBAAkBzC,MAAAA,cAEd8B,UAAYC,OAAOC,eACnBU,aAAeZ,UAAUa,WAAWC,YAItCF,aAAaG,OAAS,IAAOhC,QAAQiC,iBAAiBjD,WAAc4B,eAEpEG,SAASE,UAAUiB,WAAW,GAAGC,cAIjCN,aAAaG,OAAS,IAAMhC,QAAQoC,mBAAmBd,SAlEzCA,CAAAA,YACde,QAAUf,MAAMd,YAEb6B,SAAS,IACRA,QAAQC,UAAUC,SAAS,gBACpB,EAEXF,QAAUA,QAAQG,qBAEf,GAyD+DC,CAAanB,OAAQ,OAEjFoB,iBAAmB1C,QAAQ2C,cAAcrB,MAAOtC,8BACpD0D,YAAYE,QAAQ,QAEtB5C,QAAQE,oBAAoBC,sBAkB9B0C,oBAAuBC,UACFA,OAAOC,iBAAmBD,OAAOE,cAAcnC,UACvDR,iBAAiB,UAAWuB,gCAG3B,KAEOf,SAASoC,iBAAiB,KAClCC,SAAQC,KACfA,GAAGC,YACoBD,GAAGC,WAlB7B/C,iBAAiB,UAAWuB,oBAuBjBf,SAASoC,iBAAiB,UAClCC,QAAQL,qBAGhBhC,SAASR,iBAAiB,UAAWuB,iBAGrCf,SAASR,iBAAiB,aAAciB,QAChCtB,QAAQqD,gBAAgB/B,MAAMd,SAE9BR,QAAQsD,UAAUhC,MAAMiC,UAKhC1C,SAASR,iBAAiB,SAAUiB,cAG1BO,aADYX,OAAOC,eACMW,WAAWC,OACrCnB,eAAkBZ,QAAQqD,gBAAgB/B,MAAMd,SAAmC,IAAxBqB,aAAaG,SACzEjB,SAAS,MACTf,QAAQwD,cAAcxE"}