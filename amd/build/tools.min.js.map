{"version":3,"file":"tools.min.js","sources":["../src/tools.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to load and render the tools for the AI assist plugin.\n *\n * @module     local_assist/tools\n * @copyright  2023 Matt Porritt <matt.porritt@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Popover from 'local_assist/popover';\nimport $ from 'jquery'; // Jquery is required for Bootstrap 4 poppers.\nimport AssistModal from 'local_assist/modal';\nimport ModalEvents from 'core/modal_events';\n\n/**\n * The parent id for the popover, used to identify the popover.\n * @type {string}\n */\nconst parentId = 'text-selection-popover';\n\n/**\n * The saved text selection range.\n * @type {range}\n */\nlet textRange = null;\n\n/**\n * Display the modal when AI assistance is selected.\n *\n */\nexport const displayModal = async() => {\n    const modalObject = await AssistModal.create({\n        large: true,\n    });\n\n    const modalroot = await modalObject.getRoot();\n    const root = modalroot[0];\n\n    await modalObject.show();\n\n    modalroot.on(ModalEvents.hidden, () => {\n        window.console.log('Modal closed');\n        // Restore the saved text selection.\n        restoreSelection();\n\n        // Show the popover again.\n        Popover.showPopover(parentId);\n        Popover.addPopoverListeners(handlePopoverClick);\n        Popover.setIsPopoverInteraction(true);\n\n        // Destroy the modal.\n        modalObject.destroy();\n    });\n\n    // Add the event listener for the button click events.\n    root.addEventListener('click', (e) => {\n        const submitBtn = e.target.closest('[data-action=\"generate\"]');\n        const insertBtn = e.target.closest('[data-action=\"inserter\"]');\n        if (submitBtn) {\n            e.preventDefault();\n        } else if (insertBtn) {\n            e.preventDefault();\n            modalObject.destroy();\n        }\n    });\n};\n\nconst modalExists = () => {\n    const modal = document.getElementById('local_assist-modal');\n    return modal !== null;\n};\n\nconst isModalEvent = (event) => {\n    let element = event.target;\n\n    // Traverse up the DOM tree and check each parent element\n    while (element) {\n        if (element.classList.contains('modal')) {\n            return true;\n        }\n        element = element.parentElement;\n    }\n    return false;\n};\n\n\nconst setRange = (value) => {\n    textRange = value;\n};\n\n/**\n * Restore the saved text selection.\n * Will restore the saved highlighted text range.\n */\nconst restoreSelection = () => {\n    const selection = window.getSelection();\n    selection.removeAllRanges();\n    window.console.log('restoring range', textRange);\n    selection.addRange(textRange);\n};\n\n\n/**\n * Handle the popover link click.\n * Receives the click event and the link id from the popover.\n *\n * @param {Event} event The click event.\n * @param {string} linkId The link id.\n */\nconst handlePopoverClick = (event, linkId) => {\n    event.preventDefault();\n    event.stopImmediatePropagation(); // Prevents the event from propagating up to the document level.\n    // Popover.setIsPopoverInteraction(true);\n    window.console.log('Link clicked:', linkId);\n    // Hide the popover.\n    Popover.hidePopover(parentId);\n\n    // Display the modal.\n    displayModal();\n};\n\n/**\n * Handle text selection actions.\n * Triggered by document mouseup event.\n *\n * @param {Event} event The mouseup event.\n */\nconst handleSelection = async(event) => {\n    window.console.log('\\n mouse up event called');\n    // window.console.log('Is popover interaction', Popover.getIsPopoverInteraction());\n    window.console.log('is popoover visible', Popover.isPopoverVisible(parentId));\n    window.console.log('current text range', textRange);\n    window.console.log('event is popover link', Popover.eventIsPopoverLink(event), event.target);\n    window.console.log('modal exists', modalExists());\n\n    // First check if we have selected text.\n    const selection = window.getSelection();\n    const selectedText = selection.toString().trim();\n    window.console.log('Text has been selected: ', selectedText);\n\n    // Only update selected text if there is text actually selected, AND;\n    // Either the Popover or the modal are not shown.\n    if (selectedText.length > 0 && (!Popover.isPopoverVisible(parentId) || !modalExists())) {\n        // Update the saved text range, so we always have the most recent version of selected text.\n        window.console.log('Setting text range', selection);\n        setRange(selection.getRangeAt(0).cloneRange());\n    }\n\n    // Only show the popover if here is text actually selected OR saved, AND;\n    // Either the Popover or the modal are not shown.\n    if (selectedText.length > 0\n        && !Popover.eventIsPopoverLink(event) && !isModalEvent(event)) {\n        // Create and show popover.\n        window.console.log('Creating popover');\n        const popoverObj = await Popover.createPopover(event, parentId);\n        $(popoverObj).popover('show');\n        // Add event listeners to the popover links.\n        Popover.addPopoverListeners(handlePopoverClick);\n    }\n};\n\n/**\n * Add listener to Shadow DOM.\n *\n * @param {HTMLElement} root The root element of the Shadow DOM.\n */\nconst addListenerToShadowDOM = (root) => {\n    root.addEventListener('mouseup', handleSelection);\n};\n\n/**\n * Add listener to iFrame.\n *\n * @param {HTMLIFrameElement} iframe The iFrame element.\n */\nconst addListenerToIframe = (iframe) => {\n    const iframeDocument = iframe.contentDocument || iframe.contentWindow.document;\n    iframeDocument.addEventListener('mouseup', handleSelection);\n};\n\nexport const init = () => {\n    // Add listener to  Shadow DOM.\n    const shadowElements = document.querySelectorAll('*');\n    shadowElements.forEach(el => {\n        if (el.shadowRoot) {\n            addListenerToShadowDOM(el.shadowRoot);\n        }\n    });\n\n    // Add listener to  iFrames.\n    const iframes = document.querySelectorAll('iframe');\n    iframes.forEach(addListenerToIframe);\n\n    // Add listener to  main document.\n    document.addEventListener('mouseup', handleSelection);\n\n    // Track the start of text selection.\n    document.addEventListener('mousedown', (event) => {\n        if (Popover.popoverContains(event.target)) {\n            Popover.setIsPopoverInteraction(true);\n        } else {\n            Popover.setStartX(event.pageX);\n            Popover.setIsPopoverInteraction(false);\n        }\n    });\n\n    // Global click listener to manage popover hiding and stored swlection clearing.\n    document.addEventListener('click', (event) => {\n        window.console.log('\\n Document click event called', event.target);\n        window.console.log('Popover contains target', Popover.popoverContains(event.target));\n        window.console.log('Modal exists', modalExists());\n\n        // Close the popover if the popover is visible and the click target is not the popover.\n        if (Popover.isPopoverVisible(parentId) && !Popover.popoverContains(event.target)) {\n            window.console.log('popover is visible AND event does not contain Popover');\n            //Popover.hidePopover(parentId);\n        }\n\n        // Clear the stored text if the modal is not visible and the click target is not the popover\n        const selection = window.getSelection();\n        const selectedText = selection.toString().trim();\n        if (!modalExists() && !Popover.popoverContains(event.target) && selectedText.length === 0) {\n            window.console.log('modal does not exist AND event does not contain Popover AND there is no selected text');\n            setRange(null);\n            Popover.removePopover(parentId); // Shouldn't happen, but just in case.\n        }\n    });\n};\n"],"names":["parentId","textRange","displayModal","async","modalObject","AssistModal","create","large","modalroot","getRoot","root","show","on","ModalEvents","hidden","window","console","log","restoreSelection","Popover","showPopover","addPopoverListeners","handlePopoverClick","setIsPopoverInteraction","destroy","addEventListener","e","submitBtn","target","closest","insertBtn","preventDefault","modalExists","document","getElementById","setRange","value","selection","getSelection","removeAllRanges","addRange","event","linkId","stopImmediatePropagation","hidePopover","handleSelection","isPopoverVisible","eventIsPopoverLink","selectedText","toString","trim","length","getRangeAt","cloneRange","element","classList","contains","parentElement","isModalEvent","popoverObj","createPopover","popover","addListenerToIframe","iframe","contentDocument","contentWindow","querySelectorAll","forEach","el","shadowRoot","popoverContains","setStartX","pageX","removePopover"],"mappings":"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"}