{"version":3,"file":"loading.min.js","sources":["../src/loading.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Local assist loading screen handling.\n *\n * @module      local_assist/loading\n * @copyright   2023 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as coreStr from 'core/str';\n\n/**\n * Display a series of messages one by one with a specified delay between each message.\n * Returns a promise that resolves when the final message is displayed.\n *\n * @param {HTMLElement} element The element to display the messages in.\n * @param {number} delay The delay between each message in milliseconds.\n * @returns {Promise<function(): void>} A function to stop the message cycling.\n */\nexport const loadingMessages = async(element, delay = 6000) => {\n    let stop = false;\n\n    /**\n     * Stop the message cycling.\n     */\n    const stopMessages = () => {\n        stop = true;\n    };\n\n    const messages = await coreStr.get_strings([\n        { key: 'loading_processing', component: 'local_assist' },\n        { key: 'loading_generating', component: 'local_assist' },\n        { key: 'loading_applying', component: 'local_assist' },\n        { key: 'loading_almostdone', component: 'local_assist' }\n    ]);\n\n    return new Promise((resolve) => {\n        const displayMessages = async() => {\n            for (let i = 0; i < messages.length; i++) {\n                if (stop) {\n                    break;\n                }\n                element.textContent = messages[i];\n                await new Promise((r) => setTimeout(r, delay));\n            }\n            resolve(stopMessages);\n        };\n\n        displayMessages();\n    });\n};\n\n"],"names":["async","element","delay","stop","stopMessages","messages","coreStr","get_strings","key","component","Promise","resolve","i","length","textContent","r","setTimeout","displayMessages"],"mappings":";;;;;;;wCAiC+BA,eAAMC,aAASC,6DAAQ,IAC9CC,MAAO,QAKLC,aAAe,KACjBD,MAAO,GAGLE,eAAiBC,QAAQC,YAAY,CACvC,CAAEC,IAAK,qBAAsBC,UAAW,gBACxC,CAAED,IAAK,qBAAsBC,UAAW,gBACxC,CAAED,IAAK,mBAAoBC,UAAW,gBACtC,CAAED,IAAK,qBAAsBC,UAAW,yBAGrC,IAAIC,SAASC,UACQX,eACf,IAAIY,EAAI,EAAGA,EAAIP,SAASQ,SACrBV,KAD6BS,IAIjCX,QAAQa,YAAcT,SAASO,SACzB,IAAIF,SAASK,GAAMC,WAAWD,EAAGb,SAE3CS,QAAQP,eAGZa"}