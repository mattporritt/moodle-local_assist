{"version":3,"file":"modal.min.js","sources":["../src/modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Modal display used for accessing AI assistance tools.\n *\n * @module      local_assist/modal\n * @copyright   2023 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Modal from 'core/modal';\nimport ModalEvents from 'core/modal_events';\n\n/**\n * Class for custom AI assist modal type.\n */\nclass AssistModal extends Modal {\n    static TYPE = 'local_assist/modal';\n    static TEMPLATE = 'local_assist/modal';\n\n    registerEventListeners() {\n        // Call the parent registration.\n        super.registerEventListeners();\n\n        // Register to close on save/cancel.\n        this.registerCloseOnSave();\n        this.registerCloseOnCancel();\n    }\n}\n\n\n/**\n * Display the modal when AI assistance is selected.\n *\n * @param {function} hiddenActions The callback to pass to the hidden event.\n */\nexport const displayModal = async(hiddenActions) => {\n    const modalObject = await AssistModal.create({\n        large: true,\n    });\n    const modalroot = await modalObject.getRoot();\n    const root = modalroot[0];\n    await modalObject.show();\n\n    modalroot.on(ModalEvents.hidden, () => {\n        // Execute call back actions.\n        hiddenActions();\n        // Destroy the modal.\n        modalObject.destroy();\n    });\n\n    // Add the event listener for the button click events.\n    root.addEventListener('click', (e) => {\n        const submitBtn = e.target.closest('[data-action=\"generate\"]');\n        const insertBtn = e.target.closest('[data-action=\"inserter\"]');\n        if (submitBtn) {\n            e.preventDefault();\n        } else if (insertBtn) {\n            e.preventDefault();\n            modalObject.destroy();\n        }\n    });\n};\n\nexport const modalExists = () => {\n    const modal = document.getElementById('local_assist-modal');\n    return modal !== null;\n};\n\nexport const isModalEvent = (event) => {\n    let element = event.target;\n    // Traverse up the DOM tree and check each parent element.\n    while (element) {\n        if (element.classList.contains('modal')) {\n            return true;\n        }\n        element = element.parentElement;\n    }\n    return false;\n};\n"],"names":["AssistModal","Modal","registerEventListeners","registerCloseOnSave","registerCloseOnCancel","async","modalObject","create","large","modalroot","getRoot","root","show","on","ModalEvents","hidden","hiddenActions","destroy","addEventListener","e","submitBtn","target","closest","insertBtn","preventDefault","document","getElementById","event","element","classList","contains","parentElement"],"mappings":"wkBA6BMA,oBAAoBC,eAItBC,+BAEUA,8BAGDC,2BACAC,yCAVPJ,mBACY,sCADZA,uBAEgB,4CAkBMK,MAAAA,sBAClBC,kBAAoBN,YAAYO,OAAO,CACzCC,OAAO,IAELC,gBAAkBH,YAAYI,UAC9BC,KAAOF,UAAU,SACjBH,YAAYM,OAElBH,UAAUI,GAAGC,sBAAYC,QAAQ,KAE7BC,gBAEAV,YAAYW,aAIhBN,KAAKO,iBAAiB,SAAUC,UACtBC,UAAYD,EAAEE,OAAOC,QAAQ,4BAC7BC,UAAYJ,EAAEE,OAAOC,QAAQ,4BAC/BF,UACAD,EAAEK,iBACKD,YACPJ,EAAEK,iBACFlB,YAAYW,oCAKG,IAEN,OADHQ,SAASC,eAAe,4CAIbC,YACrBC,QAAUD,MAAMN,YAEbO,SAAS,IACRA,QAAQC,UAAUC,SAAS,gBACpB,EAEXF,QAAUA,QAAQG,qBAEf"}