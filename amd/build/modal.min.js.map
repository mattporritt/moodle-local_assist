{"version":3,"file":"modal.min.js","sources":["../src/modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Modal display used for accessing AI assistance tools.\n *\n * @module      local_assist/modal\n * @copyright   2023 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Modal from 'core/modal';\nimport ModalEvents from 'core/modal_events';\nimport {loadingMessages} from 'local_assist/loading';\n\n/**\n * Class for custom AI assist modal type.\n */\nclass AssistModal extends Modal {\n    static TYPE = 'local_assist/modal';\n    static TEMPLATE = 'local_assist/modal';\n\n    registerEventListeners() {\n        // Call the parent registration.\n        super.registerEventListeners();\n\n        // Register to close on save/cancel.\n        this.registerCloseOnSave();\n        this.registerCloseOnCancel();\n    }\n}\n\nlet root = null;\n\n/**\n * Display the modal when AI assistance is selected.\n *\n * @param {function} hiddenCallback The callback to pass to the hidden event.\n * @param {string} title The title for the modal.\n * @param {boolean} showLoading Whether to show the loading spinner.\n */\nexport const displayModal = async(hiddenCallback, title, showLoading) => {\n    const modalObject = await AssistModal.create({\n        large: true,\n        templateContext: {classes: 'local-assist-modal-dimensions'}\n    });\n    modalObject.setTitle(title);\n    const modalroot = await modalObject.getRoot();\n    root = modalroot[0];\n    await modalObject.show();\n\n    if (showLoading) {\n        // Display the loading spinner.\n        displayLoading();\n    }\n\n    modalroot.on(ModalEvents.hidden, () => {\n        // Execute call back actions.\n        hiddenCallback();\n        // Destroy the modal.\n        modalObject.destroy();\n    });\n\n    // Add the event listener for the button click events.\n    root.addEventListener('click', (e) => {\n        const submitBtn = e.target.closest('[data-action=\"generate\"]');\n        const insertBtn = e.target.closest('[data-action=\"inserter\"]');\n        if (submitBtn) {\n            e.preventDefault();\n        } else if (insertBtn) {\n            e.preventDefault();\n            modalObject.destroy();\n        }\n    });\n};\n\nexport const modalExists = () => {\n    const modal = document.getElementById('local_assist-modal');\n    return modal !== null;\n};\n\nexport const isModalEvent = (event) => {\n    let element = event.target;\n    // Traverse up the DOM tree and check each parent element.\n    while (element) {\n        if (element.classList.contains('modal')) {\n            return true;\n        }\n        element = element.parentElement;\n    }\n    return false;\n};\n\n/**\n * Display the loading action in the modal.\n *\n */\nexport const displayLoading = () => {\n    const loadingSpinnerDiv = root.querySelector('#local_assist_spinner');\n    const overlayDiv = root.querySelector('#local_assist_overlay');\n    const blurDiv = root.querySelector('#local_assist_blur');\n    const loadingTextDiv = root.querySelector('#local_assist_loading_text');\n\n    loadingMessages(loadingTextDiv);\n    loadingSpinnerDiv.classList.remove('hidden');\n    overlayDiv.classList.remove('hidden');\n    blurDiv.classList.add('local-assist-blur');\n};\n\n/**\n * Hide the loading action in the modal.\n *\n */\nexport const hideLoading = () => {\n    const loadingSpinnerDiv = root.querySelector('#local_assist_spinner');\n    const overlayDiv = root.querySelector('#local_assist_overlay');\n    const blurDiv = root.querySelector('#local_assist_blur');\n\n    loadingSpinnerDiv.classList.add('hidden');\n    overlayDiv.classList.add('hidden');\n    blurDiv.classList.remove('local-assist-blur');\n\n};\n\n/**\n * Update the modal content.\n * Can take any HTML content without javascript.\n * @param {string} bodyContent The HTML content to display in the modal.\n */\nexport const updateModalContent = (bodyContent) => {\n    // Don't use the set body function on the modal as we don't want to replace the entire body markup.\n    const modalBody = root.querySelector('#local_assist_response_content');\n    modalBody.innerHTML = bodyContent;\n};\n"],"names":["AssistModal","Modal","registerEventListeners","registerCloseOnSave","registerCloseOnCancel","root","async","hiddenCallback","title","showLoading","modalObject","create","large","templateContext","classes","setTitle","modalroot","getRoot","show","displayLoading","on","ModalEvents","hidden","destroy","addEventListener","e","submitBtn","target","closest","insertBtn","preventDefault","document","getElementById","event","element","classList","contains","parentElement","loadingSpinnerDiv","querySelector","overlayDiv","blurDiv","loadingTextDiv","remove","add","bodyContent","innerHTML"],"mappings":"irBA8BMA,oBAAoBC,eAItBC,+BAEUA,8BAGDC,2BACAC,yCAVPJ,mBACY,sCADZA,uBAEgB,0BAYlBK,KAAO,2BASiBC,MAAMC,eAAgBC,MAAOC,qBAC/CC,kBAAoBV,YAAYW,OAAO,CACzCC,OAAO,EACPC,gBAAiB,CAACC,QAAS,mCAE/BJ,YAAYK,SAASP,aACfQ,gBAAkBN,YAAYO,UACpCZ,KAAOW,UAAU,SACXN,YAAYQ,OAEdT,aAEAU,iBAGJH,UAAUI,GAAGC,sBAAYC,QAAQ,KAE7Bf,iBAEAG,YAAYa,aAIhBlB,KAAKmB,iBAAiB,SAAUC,UACtBC,UAAYD,EAAEE,OAAOC,QAAQ,4BAC7BC,UAAYJ,EAAEE,OAAOC,QAAQ,4BAC/BF,UACAD,EAAEK,iBACKD,YACPJ,EAAEK,iBACFpB,YAAYa,oCAKG,IAEN,OADHQ,SAASC,eAAe,4CAIbC,YACrBC,QAAUD,MAAMN,YAEbO,SAAS,IACRA,QAAQC,UAAUC,SAAS,gBACpB,EAEXF,QAAUA,QAAQG,qBAEf,SAOElB,eAAiB,WACpBmB,kBAAoBjC,KAAKkC,cAAc,yBACvCC,WAAanC,KAAKkC,cAAc,yBAChCE,QAAUpC,KAAKkC,cAAc,sBAC7BG,eAAiBrC,KAAKkC,cAAc,2DAE1BG,gBAChBJ,kBAAkBH,UAAUQ,OAAO,UACnCH,WAAWL,UAAUQ,OAAO,UAC5BF,QAAQN,UAAUS,IAAI,kFAOC,WACjBN,kBAAoBjC,KAAKkC,cAAc,yBACvCC,WAAanC,KAAKkC,cAAc,yBAChCE,QAAUpC,KAAKkC,cAAc,sBAEnCD,kBAAkBH,UAAUS,IAAI,UAChCJ,WAAWL,UAAUS,IAAI,UACzBH,QAAQN,UAAUQ,OAAO,kDASME,cAEbxC,KAAKkC,cAAc,kCAC3BO,UAAYD"}